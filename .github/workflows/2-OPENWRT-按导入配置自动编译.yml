#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: 2.OpenWrt-按导入配置自动编译

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "请选择OPEWRT的版本"
        required: false
        default: "openwrt-main"
        type: choice
        options:
          - openwrt-main
          - lede-master
          - immortalwrt-master
          - Lienol-master
          - istoreos-master
      banben:
        description: "请选择OPENWRT的分支版本"
        required: false
        default: "master"
        type: text
        
env:
  #FEEDS_CONF: feeds/${{ inputs.source_branch }}/feeds.conf.default
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/${{ inputs.source_branch }}/.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  DIY_P3_SH: diy-part3.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查项目分支
      uses: actions/checkout@main
      
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap* aspnetcore*
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get -qq update
        # sudo -E apt -qy install $(curl -fsSL https://raw.githubusercontent.com/Plutonium141/openwrt-depends-ubuntu/main/ubuntu)
        # sudo -E apt -y install $(curl -fsSL https://is.gd/depend_ubuntu_2204_openwrt)
        sudo -E apt-get -qq install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        # sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt-get -qq  clean && sudo -E apt-get -qq autoclean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /builder
        sudo chown $USER:$GROUPS /builder
        
    - name: 创建模拟物理磁盘
      id: disk
      run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th $PWD

    - name: 克隆源代码 [ ${{ inputs.source_branch }} ][${{inputs.banben}}]
      id: codes
      working-directory: /builder
      run: |
        df -hT $PWD
         if [[ "${{ inputs.source_branch }}" == *"openwrt"* ]]; then
            REPO_URL="https://github.com/openwrt/openwrt"
            REPO_BRANCH="main"
            TAGS_NAME="official"
        elif [[ "${{ inputs.source_branch }}" == *"lede"* ]]; then
            REPO_URL="https://github.com/coolsnowwolf/lede"
            REPO_BRANCH="master"
            TAGS_NAME="lede"
        elif [[ "${{ inputs.source_branch }}" == *"immortalwrt"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
            REPO_BRANCH="master"
            TAGS_NAME="immortalwrt"
        elif [[ "${{ inputs.source_branch }}" == *"Lienol"* ]]; then
            REPO_URL="https://github.com/Lienol/openwrt"
            REPO_BRANCH="main"
            TAGS_NAME="Lienol"
        elif [[ "${{ inputs.source_branch }}" == *"istoreos"* ]]; then
            REPO_URL="https://github.com/istoreos/istoreos"
            REPO_BRANCH="master"
            #BAN_VERS="${{inputs.banben}}"
            TAGS_NAME="istoreos"
        else
            echo "未知的源代码存储库."
              exit 1
          fi
        #git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
        git clone ${REPO_URL} -b ${REPO_BRANCH} openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
        echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
        echo "TAGS_NAME=${TAGS_NAME}" >> ${GITHUB_OUTPUT}
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: 切换OPENWRT的分支
      run: |
        cd openwrt
        #git fetch --tags --all  # 拉取所有标签和远程分支
        git tag    # 你可以查看所有可用的版本
        git branch -a  # 查看当前使用的版本
        git checkout ${{inputs.banben}}   # 切换到指定的版本
        git branch -a  # 查看当前使用的版本
        
    - name: 加载自定义提要
      run: |
        rm -rf tmp
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

   # - name: 再次更新 feeds
    #  run: cd openwrt && ./scripts/feeds update -i -f

   # - name: 再次安装 feeds
    #  run: cd openwrt && ./scripts/feeds install -a -f

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    #- name: SSH连接到Actions
      #uses: P3TERX/ssh2actions@main
      #uses: P3TERX/ssh2actions@v1.0.0
      #if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      #env:
        #TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        #TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载 package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 组织文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件以发布
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除工作流运行
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
